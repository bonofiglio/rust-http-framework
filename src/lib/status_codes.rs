#[derive(Debug)]
pub enum StatusCodes {
    // Informational 1xx
    Continue,
    SwitchingProtocols,
    // Successful 2xx
    OK,
    Created,
    Accepted,
    NonAuthoritativeInformation,
    NoContent,
    ResetContent,
    PartialContent,
    // Redirection 3xx
    MultipleChoices,
    MovedPermanently,
    Found,
    SeeOther,
    NotModified,
    UseProxy,
    Unused,
    TemporaryRedirect,
    // Client Error 4xx
    BadRequest,
    Unauthorized,
    PaymentRequired,
    Forbidden,
    NotFound,
    MethodNotAllowed,
    NotAcceptable,
    ProxyAuthenticationRequired,
    RequestTimeout,
    Conflict,
    Gone,
    LengthRequired,
    PreconditionFailed,
    RequestEntityTooLarge,
    RequestURITooLong,
    UnsupportedMediaType,
    RequestRangeNotSatisfiable,
    ExpectationFailed,
    // Server Error 5xx
    InternalServerError,
    NotImplemented,
    BadGateway,
    ServiceUnavailable,
    GatewayTimeout,
    HTTPVersionNotSupported,
}

impl StatusCodes {
    pub fn as_code(&self) -> i16 {
        match self {
            StatusCodes::Continue => 100,
            StatusCodes::SwitchingProtocols => 101,
            StatusCodes::OK => 200,
            StatusCodes::Created => 201,
            StatusCodes::Accepted => 202,
            StatusCodes::NonAuthoritativeInformation => 203,
            StatusCodes::NoContent => 204,
            StatusCodes::ResetContent => 205,
            StatusCodes::PartialContent => 206,
            StatusCodes::MultipleChoices => 300,
            StatusCodes::MovedPermanently => 301,
            StatusCodes::Found => 302,
            StatusCodes::SeeOther => 303,
            StatusCodes::NotModified => 304,
            StatusCodes::UseProxy => 305,
            StatusCodes::Unused => 306,
            StatusCodes::TemporaryRedirect => 307,
            StatusCodes::BadRequest => 400,
            StatusCodes::Unauthorized => 401,
            StatusCodes::PaymentRequired => 402,
            StatusCodes::Forbidden => 403,
            StatusCodes::NotFound => 404,
            StatusCodes::MethodNotAllowed => 405,
            StatusCodes::NotAcceptable => 406,
            StatusCodes::ProxyAuthenticationRequired => 407,
            StatusCodes::RequestTimeout => 408,
            StatusCodes::Conflict => 409,
            StatusCodes::Gone => 410,
            StatusCodes::LengthRequired => 411,
            StatusCodes::PreconditionFailed => 412,
            StatusCodes::RequestEntityTooLarge => 413,
            StatusCodes::RequestURITooLong => 414,
            StatusCodes::UnsupportedMediaType => 415,
            StatusCodes::RequestRangeNotSatisfiable => 416,
            StatusCodes::ExpectationFailed => 417,
            StatusCodes::InternalServerError => 500,
            StatusCodes::NotImplemented => 501,
            StatusCodes::BadGateway => 502,
            StatusCodes::ServiceUnavailable => 503,
            StatusCodes::GatewayTimeout => 504,
            StatusCodes::HTTPVersionNotSupported => 505,
        }
    }

    pub fn as_string(&self) -> &str {
        match self {
            StatusCodes::Continue => "Continue",
            StatusCodes::SwitchingProtocols => "Switching Protocols",
            StatusCodes::OK => "OK",
            StatusCodes::Created => "Created",
            StatusCodes::Accepted => "Accepted",
            StatusCodes::NonAuthoritativeInformation => "Non-Authoritative Information",
            StatusCodes::NoContent => "No Content",
            StatusCodes::ResetContent => "Reset Content",
            StatusCodes::PartialContent => "Partial Content",
            StatusCodes::MultipleChoices => "Multiple Choices",
            StatusCodes::MovedPermanently => "Moved Permanently",
            StatusCodes::Found => "Found",
            StatusCodes::SeeOther => "See Other",
            StatusCodes::NotModified => "Not Modified",
            StatusCodes::UseProxy => "Use Proxy",
            StatusCodes::Unused => "Unused",
            StatusCodes::TemporaryRedirect => "Temporary Redirect",
            StatusCodes::BadRequest => "Bad Request",
            StatusCodes::Unauthorized => "Unauthorized",
            StatusCodes::PaymentRequired => "Payment Required",
            StatusCodes::Forbidden => "Forbidden",
            StatusCodes::NotFound => "Not Found",
            StatusCodes::MethodNotAllowed => "Method Not Allowed",
            StatusCodes::NotAcceptable => "Not Acceptable",
            StatusCodes::ProxyAuthenticationRequired => "Proxy Authentication Required",
            StatusCodes::RequestTimeout => "Request Timeout",
            StatusCodes::Conflict => "Conflict",
            StatusCodes::Gone => "Gone",
            StatusCodes::LengthRequired => "Length Required",
            StatusCodes::PreconditionFailed => "Precondition Failed",
            StatusCodes::RequestEntityTooLarge => "Request Entity Too Large",
            StatusCodes::RequestURITooLong => "Request-URI Too Long",
            StatusCodes::UnsupportedMediaType => "Unsupported Media Type",
            StatusCodes::RequestRangeNotSatisfiable => "Requested Range Not Satisfiable",
            StatusCodes::ExpectationFailed => "Expectation Failed",
            StatusCodes::InternalServerError => "Internal Server Error",
            StatusCodes::NotImplemented => "Not Implemented",
            StatusCodes::BadGateway => "Bad Gateway",
            StatusCodes::ServiceUnavailable => "Service Unavailable",
            StatusCodes::GatewayTimeout => "Gateway Timeout",
            StatusCodes::HTTPVersionNotSupported => "HTTP Version Not Supported",
        }
    }

    pub fn as_response(&self) -> String {
        format!("{} {}", self.as_code(), self.as_string())
    }
}
